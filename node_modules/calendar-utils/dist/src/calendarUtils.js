"use strict";
var moment = require('moment');
var DAYS_IN_WEEK = 7;
var getDaySpan = function (event, offset, startOfWeek) {
    var span = 1;
    if (event.end) {
        var begin = moment(event.start).isBefore(startOfWeek) ? startOfWeek : moment(event.start);
        span = moment(event.end)
            .endOf('day')
            .add(1, 'minute')
            .diff(begin.startOf('day'), 'days');
        if (span > DAYS_IN_WEEK) {
            span = DAYS_IN_WEEK;
        }
    }
    var totalLength = offset + span;
    if (totalLength > DAYS_IN_WEEK) {
        span -= (totalLength - DAYS_IN_WEEK);
    }
    return span;
};
exports.getDayOffset = function (event, startOfWeek) {
    var offset = 0;
    if (moment(event.start).startOf('day').isAfter(moment(startOfWeek))) {
        offset = moment(event.start).startOf('day').diff(startOfWeek, 'days');
    }
    return offset;
};
exports.getWeekViewHeader = function (_a) {
    var viewDate = _a.viewDate;
    var start = moment(viewDate).startOf('week');
    var days = [];
    for (var i = 0; i < DAYS_IN_WEEK; i++) {
        days.push({
            date: start.clone().add(i, 'days')
        });
    }
    return days;
};
exports.getWeekView = function (_a) {
    var events = _a.events, viewDate = _a.viewDate;
    var startOfWeek = moment(viewDate).startOf('week');
    var endOfWeek = moment(viewDate).endOf('week');
    var eventsMapped = events.map(function (event) {
        var offset = exports.getDayOffset(event, startOfWeek);
        var span = getDaySpan(event, offset, startOfWeek);
        return {
            event: event,
            offset: offset,
            span: span,
            extendsLeft: moment(event.start).isBefore(startOfWeek),
            extendsRight: moment(event.end).isAfter(endOfWeek)
        };
    }).sort(function (itemA, itemB) {
        var startSecondsDiff = moment(itemA.event.start).diff(moment(itemB.event.start));
        if (startSecondsDiff === 0) {
            var endA = moment(itemA.event.end || itemA.event.start);
            var endB = moment(itemB.event.end || itemB.event.start);
            return moment(endB).diff(endA);
        }
        return startSecondsDiff;
    });
    var eventRows = [];
    var allocatedEvents = [];
    eventsMapped.forEach(function (event, index) {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            var rowSpan_1 = event.span + event.offset;
            var otherRowEvents = eventsMapped.slice(index + 1).filter(function (nextEvent) {
                if (allocatedEvents.indexOf(nextEvent) === -1 &&
                    nextEvent.offset >= rowSpan_1 &&
                    rowSpan_1 + nextEvent.span <= DAYS_IN_WEEK) {
                    nextEvent.offset -= rowSpan_1;
                    rowSpan_1 += nextEvent.span + nextEvent.offset;
                    allocatedEvents.push(nextEvent);
                    return true;
                }
            });
            eventRows.push({
                row: [
                    event
                ].concat(otherRowEvents)
            });
        }
    });
    return eventRows;
};
//# sourceMappingURL=calendarUtils.js.map